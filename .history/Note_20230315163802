// -----------------------------------------------------------------------------------------------

"Props" là viết tắt của thuộc tính (properties) và là một khái niệm quan trọng trong React.

Props là các giá trị được truyền vào các component của React như một tham số khi component đó được khởi tạo hoặc render. Props thường được sử dụng để truyền dữ liệu từ component cha xuống component con, hoặc để cấu hình các thuộc tính và xử lý sự kiện của một component.

Ví dụ, nếu bạn có một component Button trong React, bạn có thể truyền vào prop "label" để đặt nội dung của nút, hoặc prop "onClick" để xử lý sự kiện khi nút được nhấn.

Sử dụng props giúp tái sử dụng component một cách hiệu quả, vì nó cho phép chúng ta cấu hình lại các component với các giá trị khác nhau mà không cần phải viết lại code của component.

Props cũng là một cách để truyền dữ liệu giữa các component trong ứng dụng của bạn. Ví dụ, một component cha có thể truyền dữ liệu vào một component con thông qua props.


// -----------------------------------------------------------------------------------------------

// Trong React, useRef là một hook được sử dụng để giữ trạng thái giữa các lần render của component, mà không gây ra re-render khi thay đổi giá trị. useRef trả về một đối tượng có thuộc tính là current. Bạn có thể đặt bất kỳ giá trị nào vào thuộc tính này, và giá trị đó sẽ được giữ nguyên qua các lần render.

// Các ứng dụng của useRef bao gồm:

// Lấy giá trị của một thành phần HTML: useRef có thể được sử dụng để lấy giá trị của một thành phần HTML, ví dụ như một ô input. Bạn có thể sử dụng thuộc tính current để lấy giá trị của thành phần đó sau khi đã được nhập vào.

// Lưu trữ các giá trị trung gian: useRef có thể được sử dụng để lưu trữ các giá trị trung gian mà không cần gọi lại component. Điều này có thể hữu ích khi bạn cần giữ trạng thái của một thành phần mà không muốn re-render component.

// Thực hiện các thao tác trên các thành phần HTML: useRef có thể được sử dụng để thực hiện các thao tác trên các thành phần HTML, ví dụ như thay đổi nội dung của một thành phần sau khi đã được render.

// -----------------------------------------------------------------------------------------

createContext là một hàm trong React giúp tạo ra một context mới, cho phép các component con truy cập vào dữ liệu được chia sẻ bởi component cha. Khi sử dụng createContext, ta có thể tạo ra một object context mới, lưu trữ dữ liệu và cung cấp các hàm để cập nhật dữ liệu. Context được truyền từ component cha xuống các component con trong cây component mà không cần truyền qua các component trung gian, giúp việc quản lý state trở nên dễ dàng hơn.

// Trong React, context là một cơ chế để truyền dữ liệu giữa các thành phần của cây thành phần mà không cần thông qua các thành phần trung gian. Khi một giá trị được đặt trong context, nó có thể được truy cập từ bất kỳ thành phần con nào của nó.

// Context là một đối tượng trong React cung cấp một cách để chia sẻ dữ liệu giữa các thành phần mà không cần truyền giá trị qua nhiều cấp. Nó được sử dụng để truyền dữ liệu từ "một thành phần cha" tới "nhiều thành phần con" mà không cần thông qua các thành phần trung gian. Bằng cách sử dụng context, ta có thể giảm thiểu sự phụ thuộc giữa các thành phần và giúp cho mã nguồn trở nên dễ bảo trì hơn.

// -----------------------------------------------------------------------------------------
